#!/usr/bin/env python
"""
Test script to check Confluence page creation during release notes generation.
"""

import sys
import os
import asyncio
import logging
from pathlib import Path

# Add parent directory to path if needed
if str(Path(__file__).parent.parent) not in sys.path:
    sys.path.append(str(Path(__file__).parent.parent))

from config import Config
from jira_enricher import JiraEnricher

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_confluence_creation():
    """Test Confluence page creation during release notes generation."""
    try:
        # Create a minimal config for testing
        config = Config()
        enricher_config = config.get_enricher_config("project = TEST", "Bug")
        
        # Log the configuration
        logging.info(f"Confluence creation enabled: {enricher_config.get('create_confluence_pages')}")
        
        # Create enricher instance
        enricher = JiraEnricher(enricher_config)
        
        # Mock some data to test the save functions
        mock_data = [
            {
                'key': 'TEST-123',
                'summary': 'Test issue',
                'description': 'Test description',
                'issuetype': 'Bug',
                'status': 'Done',
                'priority': 'Medium',
                'created': '2023-01-01T10:00:00.000+0000',
                'updated': '2023-01-02T10:00:00.000+0000',
                'fixVersions': ['1.0.0'],
                'ai_enriched': True,
                'release_note': 'This is a test release note generated by AI.'
            }
        ]
        
        # Test the save_to_confluence method
        success = await enricher._save_to_confluence(mock_data)
        
        if success:
            logging.info("✅ Confluence page creation function executed successfully")
            return True
        else:
            logging.warning("❌ Confluence page creation function failed")
            return False
    
    except Exception as e:
        logging.error(f"Error during test: {str(e)}")
        import traceback
        logging.error(f"Detailed error: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    asyncio.run(test_confluence_creation())
